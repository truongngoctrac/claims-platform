version: '3.8'

name: healthcare-claims-staging

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: healthcare-mongodb-staging
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: healthcare_claims_staging
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_staging:/data/db
      - ./mongodb/init-scripts:/docker-entrypoint-initdb.d
      - ./mongodb/staging-config:/etc/mongo
    networks:
      - healthcare-network
    command: mongod --config /etc/mongo/mongod.conf
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache with Persistence
  redis:
    image: redis:7.2-alpine
    container_name: healthcare-redis-staging
    restart: always
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data_staging:/data
      - ./redis/staging.conf:/usr/local/etc/redis/redis.conf
    networks:
      - healthcare-network
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Elasticsearch Cluster
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: healthcare-elasticsearch-staging
    restart: always
    environment:
      - cluster.name=healthcare-staging-cluster
      - node.name=staging-node-1
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data_staging:/usr/share/elasticsearch/data
      - ./elasticsearch/staging-config:/usr/share/elasticsearch/config/custom
    networks:
      - healthcare-network
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:${ELASTICSEARCH_PASSWORD} -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Basic Claims Service
  basic-claims-service:
    image: ${DOCKER_REGISTRY}/healthcare-basic-claims-service:${VERSION}
    container_name: healthcare-claims-service-staging
    restart: always
    environment:
      - FLASK_ENV=staging
      - FLASK_DEBUG=0
      - MONGODB_URI=mongodb://${MONGODB_ROOT_USERNAME}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/healthcare_claims_staging?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ELASTICSEARCH_URL=http://elastic:${ELASTICSEARCH_PASSWORD}@elasticsearch:9200
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=INFO
    ports:
      - "5001:5000"
    networks:
      - healthcare-network
    depends_on:
      - mongodb
      - redis
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Policy Management Service
  policy-management-service:
    image: ${DOCKER_REGISTRY}/healthcare-policy-management-service:${VERSION}
    container_name: healthcare-policy-service-staging
    restart: always
    environment:
      - FLASK_ENV=staging
      - FLASK_DEBUG=0
      - MONGODB_URI=mongodb://${MONGODB_ROOT_USERNAME}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/healthcare_claims_staging?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=INFO
    ports:
      - "5002:5000"
    networks:
      - healthcare-network
    depends_on:
      - mongodb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # User Management Service
  user-management-service:
    image: ${DOCKER_REGISTRY}/healthcare-user-management-service:${VERSION}
    container_name: healthcare-user-service-staging
    restart: always
    environment:
      - FLASK_ENV=staging
      - FLASK_DEBUG=0
      - MONGODB_URI=mongodb://${MONGODB_ROOT_USERNAME}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/healthcare_claims_staging?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - SENTRY_DSN=${SENTRY_DSN}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT}
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_USE_TLS=true
      - LOG_LEVEL=INFO
    ports:
      - "5003:5000"
    networks:
      - healthcare-network
    depends_on:
      - mongodb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # API Gateway
  api-gateway:
    image: ${DOCKER_REGISTRY}/healthcare-api-gateway:${VERSION}
    container_name: healthcare-api-gateway-staging
    restart: always
    environment:
      - ENVIRONMENT=staging
      - CLAIMS_SERVICE_URL=http://basic-claims-service:5000
      - POLICY_SERVICE_URL=http://policy-management-service:5000
      - USER_SERVICE_URL=http://user-management-service:5000
      - CORS_ORIGINS=${CORS_ORIGINS}
      - RATE_LIMIT_REQUESTS=500
      - RATE_LIMIT_WINDOW=3600
      - SENTRY_DSN=${SENTRY_DSN}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    networks:
      - healthcare-network
    depends_on:
      - basic-claims-service
      - policy-management-service
      - user-management-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: healthcare-nginx-staging
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ../../dist:/usr/share/nginx/html:ro
    networks:
      - healthcare-network
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: healthcare-prometheus-staging
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.staging.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data_staging:/prometheus
    networks:
      - healthcare-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.2.0
    container_name: healthcare-grafana-staging
    restart: always
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${EMAIL_SMTP_HOST}:${EMAIL_SMTP_PORT}
      - GF_SMTP_USER=${EMAIL_USERNAME}
      - GF_SMTP_PASSWORD=${EMAIL_PASSWORD}
    volumes:
      - grafana_data_staging:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - healthcare-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Log Aggregation with Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: healthcare-loki-staging
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki.staging.yml:/etc/loki/local-config.yaml:ro
      - loki_data_staging:/loki
    networks:
      - healthcare-network
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Promtail for Log Collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: healthcare-promtail-staging
    restart: always
    volumes:
      - ./monitoring/promtail/promtail.staging.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - healthcare-network
    depends_on:
      - loki
    command: -config.file=/etc/promtail/config.yml

volumes:
  mongodb_data_staging:
    name: healthcare_mongodb_data_staging
  redis_data_staging:
    name: healthcare_redis_data_staging
  elasticsearch_data_staging:
    name: healthcare_elasticsearch_data_staging
  prometheus_data_staging:
    name: healthcare_prometheus_data_staging
  grafana_data_staging:
    name: healthcare_grafana_data_staging
  loki_data_staging:
    name: healthcare_loki_data_staging

networks:
  healthcare-network:
    name: healthcare-staging-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16

# Health check script
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 5
  start_period: 40s
