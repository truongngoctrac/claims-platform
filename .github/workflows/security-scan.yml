name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly Monday 2 AM UTC

jobs:
  # Dependency Vulnerability Scanning
  dependency-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm audit --audit-level moderate

      - name: Run npm audit with SARIF output
        run: |
          npm audit --audit-level moderate --json > npm-audit.json || true
          npx audit-ci --moderate || true

      - name: Upload npm audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: npm-audit.json

  # Python Dependencies Security Scan
  python-security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [basic-claims-service, policy-management-service, user-management-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install safety scanner
        run: pip install safety bandit

      - name: Run safety check
        run: |
          cd backend/${{ matrix.service }}
          safety check -r requirements.txt --json > safety-report.json || true

      - name: Run bandit security linter
        run: |
          cd backend/${{ matrix.service }}
          bandit -r . -f json -o bandit-report.json || true

      - name: Upload Python security reports
        uses: actions/upload-artifact@v4
        with:
          name: python-security-${{ matrix.service }}
          path: backend/${{ matrix.service }}/*-report.json

  # OWASP Dependency Check
  owasp-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Vietnamese Healthcare Claims'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --suppression suppression.xml

      - name: Upload OWASP results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/dependency-check-report.sarif

  # CodeQL Analysis
  codeql:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # Secret Scanning
  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Container Security Scanning with comprehensive checks
  container-security-advanced:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [basic-claims-service, policy-management-service, user-management-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          cd backend/${{ matrix.service }}
          docker build -t healthcare-${{ matrix.service }}:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'healthcare-${{ matrix.service }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'

      - name: Run Hadolint for Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: backend/${{ matrix.service }}/Dockerfile
          format: sarif
          output-file: hadolint-${{ matrix.service }}.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'hadolint-${{ matrix.service }}.sarif'

  # Infrastructure as Code Security
  iac-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif

  # Healthcare Compliance Security Checks
  compliance-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: HIPAA Compliance Check
        run: |
          echo "Running HIPAA compliance checks..."
          # Check for proper encryption in config files
          grep -r "encrypt" . --include="*.json" --include="*.yml" --include="*.py" --include="*.ts" || echo "No encryption configs found"
          
          # Check for authentication mechanisms
          grep -r "auth" . --include="*.py" --include="*.ts" || echo "No auth configs found"
          
          # Check for logging configurations
          grep -r "log" . --include="*.py" --include="*.ts" || echo "No logging configs found"

      - name: Data Protection Verification
        run: |
          echo "Verifying data protection measures..."
          # Check for password hashing
          grep -r "bcrypt\|hash\|password" . --include="*.py" --include="*.ts" || echo "No password protection found"
          
          # Check for input validation
          grep -r "validation\|sanitize" . --include="*.py" --include="*.ts" || echo "No input validation found"

  # Generate Security Report
  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, python-security, owasp-scan, codeql, secret-scan, container-security-advanced, iac-security, compliance-scan]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "## Scan Date: $(date -u)" >> security-summary.md
          echo "## Commit: ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          echo "### Completed Scans:" >> security-summary.md
          echo "- ✅ Dependency vulnerability scanning" >> security-summary.md
          echo "- ✅ Python security analysis" >> security-summary.md
          echo "- ✅ OWASP dependency check" >> security-summary.md
          echo "- ✅ CodeQL static analysis" >> security-summary.md
          echo "- ✅ Secret scanning" >> security-summary.md
          echo "- ✅ Container security scanning" >> security-summary.md
          echo "- ✅ Infrastructure as Code security" >> security-summary.md
          echo "- ✅ Healthcare compliance checks" >> security-summary.md
          echo "" >> security-summary.md
          echo "### Next Steps:" >> security-summary.md
          echo "- Review GitHub Security tab for detailed findings" >> security-summary.md
          echo "- Address any high/critical vulnerabilities" >> security-summary.md
          echo "- Update dependencies as needed" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90
