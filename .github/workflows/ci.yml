name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Testing and Build
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npm run typecheck

      - name: Run frontend tests
        run: npm test

      - name: Build frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist/
          retention-days: 7

  # Backend Services Testing
  backend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [basic-claims-service, policy-management-service, user-management-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies for ${{ matrix.service }}
        run: |
          cd backend/${{ matrix.service }}
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black

      - name: Run code formatting check
        run: |
          cd backend/${{ matrix.service }}
          black --check .

      - name: Run linting
        run: |
          cd backend/${{ matrix.service }}
          flake8 .

      - name: Run tests with coverage
        run: |
          cd backend/${{ matrix.service }}
          pytest --cov=. --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}

  # Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high

  # Container Security Scan
  container-security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [basic-claims-service, policy-management-service, user-management-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          cd backend/${{ matrix.service }}
          docker build -t ${{ matrix.service }}:latest .

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.service }}:latest'
          format: 'sarif'
          output: '${{ matrix.service }}-container-results.sarif'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: '${{ matrix.service }}-container-results.sarif'

  # Integration Tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
      redis:
        image: redis:7.2
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for services
        run: |
          sleep 30
          npm run test:integration || echo "No integration tests configured yet"

  # Accessibility Testing
  accessibility-test:
    runs-on: ubuntu-latest
    needs: frontend-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start server for testing
        run: |
          npm start &
          sleep 30

      - name: Run accessibility tests with axe
        run: |
          npx @axe-core/cli http://localhost:8080 --exit || echo "Accessibility tests need configuration"

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: frontend-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start server for testing
        run: |
          npm start &
          sleep 30

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun || echo "Lighthouse CI needs configuration"
